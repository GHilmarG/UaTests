function  BCs=DefineBoundaryConditions(Experiment,CtrlVar,MUA,BCs,time,s,b,h,S,B,ub,vb,ud,vd,GF)


x=MUA.coordinates(:,1); y=MUA.coordinates(:,2);

% find nodes along boundary for which Dirichlet boundary conditions apply


xd=max(x(:)) ; xu=min(x(:)); yl=max(y(:)) ; yr=min(y(:));

nodesd=find(Bs(x-xd)<1e-5); [~,ind]=sort(MUA.coordinates(nodesd,2)); nodesd=nodesd(ind);
nodesu=find(Bs(x-xu)<1e-5); [~,ind]=sort(MUA.coordinates(nodesu,2)); nodesu=nodesu(ind);
nodesl=find(Bs(y-yl)<1e-5); [~,ind]=sort(MUA.coordinates(nodesl,1)); nodesl=nodesl(ind);
nodesr=find(Bs(y-yr)<1e-5); [~,ind]=sort(MUA.coordinates(nodesr,1)); nodesr=nodesr(ind);


ubvbFixedNormalNode=MUA.Boundary.Nodes(MUA.coordinates(MUA.Boundary.Nodes,1)>xu & MUA.coordinates(MUA.Boundary.Nodes,1)<xd);
ubvbFixedNormalValue=ubvbFixedNormalNode*0;

udvdFixedNormalNode=ubvbFixedNormalNode; ubvbFixedNormalValue=ubvbFixedNormalNode*0;

% fixing nodes up, left and right
ubTiedNodeA=[]; ubTiedNodeB=[]; vbTiedNodeA=[]; vbTiedNodeB=[];
vbFixedNode=[nodesu];  vbFixedValue=vbFixedNode*0;
ubFixedNode=[nodesu];  ubFixedValue=ubFixedNode*0;
hFixedNode=[nodesu];  hFixedValue=hFixedNode*0+1000;
%hfixednode=[];  hFixedValue=[];
htiedA=[]; htiedB=[];

[vbFixedNode,ind]=unique(vbFixedNode);  vbFixedValue=vbFixedValue(ind);
[ubFixedNode,ind]=unique(ubFixedNode);  ubFixedValue=ubFixedValue(ind);


BCs.ubFixedNode=ubFixedNode;
BCs.ubFixedValue=ubFixedValue;
BCs.vbFixedNode=vbFixedNode;
BCs.vbFixedValue=vbFixedValue;
BCs.ubTiedNodeA=ubTiedNodeA;
BCs.ubTiedNodeB=ubTiedNodeB;
BCs.vbTiedNodeA=vbTiedNodeA;
BCs.vbTiedNodeB=vbTiedNodeB;
BCs.hFixedNode=hFixedNode;
BCs.hFixedValue=hFixedValue;
BCs.hTiedNodeA=hTiedNodeA;
BCs.hTiedNodeB=hTiedNodeB;
BCs.ubvbFixedNormalNode=ubvbFixedNormalNode;
BCs.ubvbFixedNormalValue=ubvbFixedNormalValue;
BCs.udvdFixedNormalNode=udvdFixedNormalNode;
BCs.udvdFixedNormalValue=udvdFixedNormalValue;



end