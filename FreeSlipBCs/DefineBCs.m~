function  [ufixednode,ufixedvalue,vfixednode,vfixedvalue,utiedA,utiedB,vtiedA,vtiedB,hfixednode,hfixedvalue,htiedA,htiedB,FixedNormalVelocityNode,NormalVelocity]=...
                DefineBCs(Experiment,CtrlVar,MUA,time,s,b,h,S,B,ub,vb,ud,vd,GF)

%%
            
x=MUA.coordinates(:,1); y=MUA.coordinates(:,2);

% find nodes along boundary for which Dirichlet boundary conditions apply


xd=max(x(:)) ; xu=min(x(:)); yl=max(y(:)) ; yr=min(y(:));

nodesd=find(abs(x-xd)<1e-5); [~,ind]=sort(MUA.coordinates(nodesd,2)); nodesd=nodesd(ind);
nodesu=find(abs(x-xu)<1e-5); [~,ind]=sort(MUA.coordinates(nodesu,2)); nodesu=nodesu(ind);
nodesl=find(abs(y-yl)<1e-5); [~,ind]=sort(MUA.coordinates(nodesl,1)); nodesl=nodesl(ind);
nodesr=find(abs(y-yr)<1e-5); [~,ind]=sort(MUA.coordinates(nodesr,1)); nodesr=nodesr(ind);


FixedNormalVelocityNode=MUA.Boundary.Nodes(MUA.coordinates(MUA.Boundary.Nodes,1)>xu & MUA.coordinates(MUA.Boundary.Nodes,1)<xd);
NormalVelocity=FixedNormalVelocityNode*0;


% fixing nodes up, left and right 
utiedA=[]; utiedB=[]; vtiedA=[]; vtiedB=[];
vfixednode=[nodesu];  vfixedvalue=vfixednode*0;
ufixednode=[nodesu];  ufixedvalue=ufixednode*0;
hfixednode=[nodesu];  hfixedvalue=hfixednode*0+1000;
%hfixednode=[];  hfixedvalue=[];
htiedA=[]; htiedB=[];

[vfixednode,ind]=unique(vfixednode);  vfixedvalue=vfixedvalue(ind);
[ufixednode,ind]=unique(ufixednode);  ufixedvalue=ufixedvalue(ind);
PlotBCs(CtrlVar,MUA.coordinates,MUA.connectivity,MUA.Boundary,...
            ufixednode,ufixedvalue,vfixednode,vfixedvalue,utiedA,utiedB,vtiedA,vtiedB,hfixednode,hfixedvalue,htiedA,htiedB,FixedNormalVelocityNode,NormalVelocity);
     

%%
end
