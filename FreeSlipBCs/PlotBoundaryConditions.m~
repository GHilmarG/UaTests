function PlotBoundaryConditions(CtrlVar,MUA,BCs)

 
    
    CtrlVar.PlotMesh=1;
 
    PlotFEmesh(MUA.coordinates,MUA.connectivity,CtrlVar); hold on
    
    x=MUA.x/CtrlVar.PlotXYscale; y=MUA.y/CtrlVar.PlotXYscale;
    
	velscale=max([max(x)-min(x) ; max(y)-min(y)])/20;
    velscale=velscale*CtrlVar.BoundaryConditionsFixedNodeArrowScale;
	headscale=0.3; sharp=0.3; head=1; lw=1; io=-1; col='r';
	
    if ~isempty(BCs.ubFixedNode)
        xfixed=x(BCs.ubFixedNode,1); yfixed=y(BCs.ubFixedNode,2);
        ghg_arrow(xfixed,yfixed,xfixed*0+1,yfixed*0,velscale,headscale,sharp,head,col,lw,io);
    end
    
    if ~isempty(BCs.vbFixedNode)
        xfixed=x(BCs.vbFixedNode,1); yfixed=y(BCs.vbFixedNode,2);
        ghg_arrow(xfixed,yfixed,xfixed*0,yfixed*0+1,velscale,headscale,sharp,head,col,lw,io);
    end
    
    if ~isempty(BCs.ubvbFixedNormalNode)
        xfixed=x(BCs.ubvbFixedNormalNode,1); yfixed=y(BCs.ubvbFixedNormalNode,2);
        [nx,ny,xn,yn,Nx,Ny] = CalcEdgeAndNodalNormals(MUA.connectivity,MUA.coordinates,MUA.Boundary.Edges);
        col='c';
        ghg_arrow(xfixed,yfixed,Nx(BCs.ubvbFixedNormalNode),Ny(BCs.ubvbFixedNormalNode),velscale,headscale,sharp,head,col,lw,io);
    end
    % plot ties
    
    if ~isempty(BCs.ubTiedNodeA)
        for I=1:numel(BCs.vbTiedNodeA)
            plot(x(BCs.ubTiedNodeA(I)),y(BCs.ubTiedNodeA(I)),'ob')
            plot(x(BCs.ubTiedNodeB(I)),y(BCs.ubTiedNodeB(I)),'xb')
            plot([x(BCs.ubTiedNodeA(I))  x(BCs.ubTiedNodeB(I))],[y(BCs.ubTiedNodeA(I))  y(BCs.ubTiedNodeB(I))],'b--')
        end
    end
    
    if ~isempty(BCs.vbTiedNodeA)
        for I=1:numel(BCs.vbTiedNodeA)
            plot(x(BCs.vbTiedNodeA(I)),y(BCs.vbTiedNodeA(I)),'xr')  
            plot(x(BCs.vbTiedNodeB(I)),y(BCs.vbTiedNodeB(I)),'^r')  
            plot([x(BCs.vbTiedNodeA(I))  x(BCs.vbTiedNodeB(I))],[y(BCs.vbTiedNodeA(I))  y(BCs.vbTiedNodeB(I))],'r-.')
        end
    end
    
     if ~isempty(htiedA)
        for I=1:numel(BCs.vbTiedNodeA)
            plot(x(htiedA(I)),y(htiedA(I)),'sg')  
            plot(x(htiedB(I)),y(htiedB(I)),'dg')  
            plot([x(htiedA(I))  x(htiedB(I))], [y(htiedA(I))  y(htiedB(I))],'g:')
        end
    end
    
    if isfield(Boundary,'ElementsBCu')
        
        
        fe=connectivity(MUA.Boundary.ElementsBCu{1},MUA.Boundary.Edge{1})';
        plot(x(fe)+2*velscale/1e3, y(fe)+2*velscale/1e3, '-g', 'LineWidth',2) ;
        
        fe=connectivity(MUA.Boundary.ElementsBCu{2},MUA.Boundary.Edge{2})';
        plot(x(fe)+2*velscale/1e3, y(fe)+2*velscale/1e3, '-r', 'LineWidth',2) ;
        
        fe=connectivity(MUA.Boundary.ElementsBCu{3},MUA.Boundary.Edge{3})';
        plot(x(fe)+2*velscale/1e3, y(fe)+2*velscale/1e3, '-c', 'LineWidth',2) ;
        
        fe=connectivity(MUA.Boundary.ElementsBCv{1},MUA.Boundary.Edge{1})';
        plot(x(fe)+2*velscale/1e3, y(fe)-2*velscale/1e3, '-.g', 'LineWidth',2) ;
        
        fe=connectivity(MUA.Boundary.ElementsBCv{2},Boundary.Edge{2})';
        plot(x(fe)+2*velscale/1e3, y(fe)-2*velscale/1e3, '-.r', 'LineWidth',2) ;
        
        fe=connectivity(Boundary.ElementsBCv{3},Boundary.Edge{3})';
        plot(x(fe)+2*velscale/1e3, y(fe)-2*velscale/1e3, '-.c', 'LineWidth',2)
        
    end
    
    % plot edges
    %figure
    %fe=connectivity(Boundary.Elements{1},Boundary.Edge{1})'; plot(x(fe)+2*velscale/1e3, y(fe)+2*velscale/1e3, '-g', 'LineWidth',2) ; hold on
    %fe=connectivity(Boundary.Elements{2},Boundary.Edge{2})'; plot(x(fe)+2*velscale/1e3, y(fe)+2*velscale/1e3, '-r', 'LineWidth',2) ;
    %fe=connectivity(Boundary.Elements{3},Boundary.Edge{3})'; plot(x(fe)+2*velscale/1e3, y(fe)+2*velscale/1e3, '-c', 'LineWidth',2) ;
    %%


   if ~isempty(hfixednode)
        xfixed=x(hfixednode,1); yfixed=y(hfixednode,2);
        plot(xfixed,yfixed,'oc','MarkerFaceColor','c')
   end
   
   
   title(...
       sprintf('Boundary conditions: \n Arrows represent fixed u,v, and normal velocites (%i,%i,%i). \n Cyan filled circles show where the thickness is fixed (%i) \n Blue,red grean lines are (u,v,h) nodal ties (%i,%i,%i)',...
       numel(BCs.ubFixedNode),numel(BCs.vbFixedNode),numel(BCs.ubvbFixedNormalNode),numel(hfixednode),numel(BCs.ubTiedNodeA),numel(BCs.vbTiedNodeA),numel(htiedA)),...
       'FontSize',9)


end
